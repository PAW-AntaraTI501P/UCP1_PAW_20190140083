<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <title>Daftar Perpustakaan</title>
  </head>
  <body>
    <div class="container mt-5">
      <h1>Daftar Perpustakaan</h1>
      <p>Ini adalah halaman database buku</p>

      <% if (todos && todos.length > 0) { %>
      <ul class="list-group" id="taskList">
        <% todos.forEach(function(todo) { %>
        <li class="list-group-item d-flex justify-content-between align-items-center" id="task-<%= todo.ID %>">
          <span>ID: <%= todo.ID %> Nama Buku: <%= todo.Buku %></span>
          <div class="mt-2 d-flex gap-2">
            <!-- Tombol PUT -->
            <button class="btn btn-warning btn-sm" onclick="updateTodo(<%= todo.ID %>)">PUT</button>
            <!-- Tombol DELETE -->
            <button class="btn btn-danger btn-sm" onclick="deleteTodo(<%= todo.ID %>)">DELETE</button>
          </div>
        </li>
        <% }); %>
      </ul>
      <% } else { %>
      <p>Tidak ada nama Buku yang tersedia.</p>
      <% } %>

      <!-- Tombol POST dan Input -->
      <div class="mt-3">
        <input type="text" id="newTask" class="form-control" placeholder="Masukkan nama Buku baru..." />
        <button class="btn btn-success mt-2" onclick="addTodo()">POST</button>
      </div>
      <a href="/" class="btn btn-primary mt-3 ml-2">Go to Home</a>
    </div>

    <script>

      function addTodo() {
        const newTask = document.getElementById("newTask").value;
        if (newTask) {
          fetch('/todos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ task: newTask })
          })
            .then(res => res.json())
            .then(data => {
              alert('POST berhasil!');
              location.reload(); // Me-refresh halaman setelah POST
            })
            .catch(err => alert("Terjadi kesalahan saat POST"));
        } else {
          alert("Nama Buku tidak boleh kosong!");
        }
      }

      function updateTodo(id) {
        const updatedTask = prompt("Masukkan nama Buku baru:");
        if (updatedTask) {
          fetch(`/todos/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ task: updatedTask })
          })
            .then(res => res.json())
            .then(data => {
              alert('PUT berhasil!');
              location.reload(); // Me-refresh halaman setelah PUT
            })
            .catch(err => alert("Terjadi kesalahan saat PUT"));
        }
      }

      function deleteTodo(id) {
        if (confirm("Yakin ingin menghapus nama Buku ini?")) {
          fetch(`/todos/${id}`, { method: 'DELETE' })
            .then(res => {
              if (res.ok) {
                alert('DELETE berhasil!');
                location.reload(true); // Me-refresh halaman setelah penghapusan
              } else {
                alert("Terjadi kesalahan saat DELETE");
              }
            })
            .catch(err => alert("Terjadi kesalahan saat DELETE"));
        }
      }
    </script>
  </body>
</html>
